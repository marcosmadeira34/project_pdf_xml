"""
Django settings for nfse_abrasf project.

Generated by 'django-admin startproject' using Django 5.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import os
from dotenv import load_dotenv
import dj_database_url
import ssl
import json
import unicodedata
import re

load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv("DJANGO_SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*', 'https://nfse-abrasf-project-633c01390d1d.herokuapp.com/', 
                 'alive.com.br', 'www.alive.com.br', '3.132.214.90']


# Application definition

INSTALLED_APPS = [
    'jet',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'extract',
    'corsheaders'
]

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware", 
    'django.middleware.security.SecurityMiddleware',
    # 'extract.middleware.CORSMiddleware',  # CORS customizado para Streamlit
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    "whitenoise.middleware.WhiteNoiseMiddleware",
    'extract.middleware.JWTAuthenticationMiddleware',  # Middleware JWT
]

# Configurações de CORS:
CORS_ALLOWED_ORIGINS = [
    "https://www.alivee.com.br",
    "https://alivee.com.br",
]

CORS_ALLOW_CREDENTIALS = True

ROOT_URLCONF = 'nfse_abrasf.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'nfse_abrasf.wsgi.application'
ASGI_APPLICATION = "nfse_abrasf.asgi.application"


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

# Verifique se a variável de ambiente HEROKU está configurada para determinar o ambiente
if os.environ.get('HEROKU') == 'True':  # No Heroku, 'HEROKU' será True
    DATABASES = {
        'default': dj_database_url.config(conn_max_age=600)
    }
else:  # Localmente, utilizaremos SQLite
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
        }
    }


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'pt-br'

TIME_ZONE = 'America/Sao_Paulo'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

# STATIC_URL = 'static/'



GOOGLE_APPLICATION_CREDENTIALS = os.getenv("GOOGLE_APPLICATION_CREDENTIALS", "")
#if GOOGLE_APPLICATION_CREDENTIALS and not os.path.isfile(GOOGLE_APPLICATION_CREDENTIALS):
 #   raise ValueError("Arquivo de credenciais do Google não encontrado.")

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

LOGIN_URL = "/login/"
LOGIN_REDIRECT_URL = "/"  # Para onde o usuário será redirecionado após o login
LOGOUT_REDIRECT_URL = "/"  # Para onde o usuário será redirecionado após logout

# Para gerar os arquivos estáticos no Heroku, o Django precisa de um diretório.
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# Indica onde os arquivos estáticos são armazenados durante o desenvolvimento
STATIC_URL = '/static/'

# Utilize o Whitenoise para servir os arquivos estáticos
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Diretórios adicionais onde arquivos estáticos podem ser encontrados
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'),  # Seu diretório local de arquivos estáticos
]

INSTALLED_APPS += ['whitenoise.runserver_nostatic']
MIDDLEWARE.insert(1, 'whitenoise.middleware.WhiteNoiseMiddleware')

REDIS_URL = os.getenv('REDIS_URL', 'redis://localhost:6379/0')

# Configuração do Celery
CELERY_BROKER_URL = REDIS_URL
CELERY_RESULT_BACKEND = REDIS_URL

CELERY_TASK_SERIALIZER = "json"
CELERY_ACCEPT_CONTENT = ["json"]

# SSL config para rediss://
if REDIS_URL.startswith("rediss://"):
    CELERY_REDIS_BACKEND_USE_SSL = {
        "ssl_cert_reqs": ssl.CERT_NONE
    }


# Configurações de arquivos de mídia
MEDIA_URL = "/media/"
MEDIA_ROOT = os.path.join(BASE_DIR, "media")

# Defina um local correto para salvar os arquivos
DEFAULT_FILE_STORAGE = "django.core.files.storage.FileSystemStorage"


print(f"O base dir é: {BASE_DIR}")


# with open(Path(BASE_DIR) / "municipios.json", encoding="utf-8") as f:
#     CIDADES_IBGE = json.load(f)
def normalizar(texto):
    texto = unicodedata.normalize("NFD", texto)
    texto = texto.encode("ascii", "ignore").decode("utf-8")
    texto = re.sub(r'[^a-zA-Z0-9\s]', '', texto)
    return texto.upper().strip()


with open(Path(BASE_DIR) / "municipios.json", encoding="utf-8") as f:
    municipios_raw = json.load(f)


UF_POR_CODIGO = {
    11: "RO", 12: "AC", 13: "AM", 14: "RR", 15: "PA", 16: "AP", 17: "TO",
    21: "MA", 22: "PI", 23: "CE", 24: "RN", 25: "PB", 26: "PE", 27: "AL", 28: "SE", 29: "BA",
    31: "MG", 32: "ES", 33: "RJ", 35: "SP", 41: "PR", 42: "SC", 43: "RS",
    50: "MS", 51: "MT", 52: "GO", 53: "DF"
}

CIDADES_IBGE = {
    f"{normalizar(m['nome'])}-{UF_POR_CODIGO.get(m['codigo_uf'], '')}": str(m["codigo_ibge"])
    for m in municipios_raw
    if "nome" in m and "codigo_ibge" in m and "codigo_uf" in m
}


CSRF_TRUSTED_ORIGINS = [
    'https://nfse-abrasf-project-633c01390d1d.herokuapp.com', # Seu próprio domínio Django
    #'https://nfse-abrasf-streamlit-frontend-b3362614a366.herokuapp.com', # <-- O domínio do seu app Streamlit
    # Se você usar um custom domain futuramente, adicione-o aqui também
    # 'https://www.meudominio.com',
    # 'https://meu-app-streamlit.com',
]

# Redis para armazenar mensagens WebSocket
CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels_redis.core.RedisChannelLayer",
        "CONFIG": {
            "hosts": [("127.0.0.1", 6379)],
        },
    },
}

DATA_UPLOAD_MAX_NUMBER_FILES = 200


BUCKETEER_AWS_ACCESS_KEY_ID = os.getenv("BUCKETEER_AWS_ACCESS_KEY_ID")
BUCKETEER_AWS_REGION = os.getenv("BUCKETEER_AWS_REGION", "us-east-1")
BUCKETEER_AWS_SECRET_ACCESS_KEY = os.getenv("BUCKETEER_AWS_SECRET_ACCESS_KEY")
BUCKETEER_BUCKET_NAME = os.getenv("BUCKETEER_BUCKET_NAME")
BUCKETEER_SECURE = os.getenv("BUCKETEER_SECURE", "True").lower() == "true"
BUCKETEER_ENDPOINT = os.getenv("BUCKETEER_ENDPOINT", "s3.amazonaws.com")


# Configurações de email
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = os.getenv("EMAIL_HOST")
EMAIL_PORT = int(os.getenv("EMAIL_PORT", 587))
EMAIL_HOST_USER = os.getenv("EMAIL_HOST_USER")
EMAIL_HOST_PASSWORD = os.getenv("EMAIL_HOST_PASSWORD")
EMAIL_USE_TLS = os.getenv("EMAIL_USE_TLS", "True") == "True"

DEFAULT_FROM_EMAIL = os.getenv("DEFAULT_FROM_EMAIL")
SUPPORT_EMAIL = os.getenv("SUPPORT_EMAIL")