#!/usr/bin/env python3
"""
Script de teste para o sistema de autentica√ß√£o JWT
Execute este script para testar todos os endpoints de autentica√ß√£o
"""

import requests
import json
import time
import sys
import os

# Configura√ß√µes
DJANGO_URL = "http://127.0.0.1:8001"
TEST_USERNAME = "admin"  # Altere conforme necess√°rio
TEST_PASSWORD = "admin123"  # Altere conforme necess√°rio

class AuthTester:
    def __init__(self):
        self.access_token = None
        self.refresh_token = None
        self.base_url = DJANGO_URL
    
    def print_status(self, message, success=True):
        """Imprime status colorido"""
        color = "\033[92m" if success else "\033[91m"  # Verde ou Vermelho
        reset = "\033[0m"
        status = "‚úì" if success else "‚úó"
        print(f"{color}{status} {message}{reset}")
    
    def test_login(self):
        """Testa o endpoint de login"""
        print("\n" + "="*50)
        print("üîë TESTANDO LOGIN")
        print("="*50)
        
        try:
            response = requests.post(
                f"{self.base_url}/extract/auth/login/",
                json={
                    "username": TEST_USERNAME,
                    "password": TEST_PASSWORD
                },
                timeout=10
            )
            
            if response.status_code == 200:
                data = response.json()
                self.access_token = data['tokens']['access_token']
                self.refresh_token = data['tokens']['refresh_token']
                
                self.print_status(f"Login realizado com sucesso!")
                self.print_status(f"Usu√°rio: {data['user']['username']}")
                self.print_status(f"Email: {data['user']['email']}")
                self.print_status(f"Access Token: {self.access_token[:50]}...")
                self.print_status(f"Refresh Token: {self.refresh_token[:50]}...")
                return True
            else:
                error_data = response.json()
                self.print_status(f"Erro no login: {error_data.get('error', 'Erro desconhecido')}", False)
                return False
                
        except requests.exceptions.RequestException as e:
            self.print_status(f"Erro de conex√£o: {str(e)}", False)
            return False
    
    def test_verify_token(self):
        """Testa a verifica√ß√£o de token"""
        print("\n" + "="*50)
        print("üîç TESTANDO VERIFICA√á√ÉO DE TOKEN")
        print("="*50)
        
        if not self.access_token:
            self.print_status("Nenhum token dispon√≠vel para verificar", False)
            return False
        
        try:
            response = requests.post(
                f"{self.base_url}/extract/auth/verify/",
                headers={
                    "Authorization": f"Bearer {self.access_token}"
                },
                timeout=10
            )
            
            if response.status_code == 200:
                data = response.json()
                self.print_status("Token verificado com sucesso!")
                self.print_status(f"Token v√°lido para usu√°rio: {data['user']['username']}")
                return True
            else:
                error_data = response.json()
                self.print_status(f"Erro na verifica√ß√£o: {error_data.get('error', 'Token inv√°lido')}", False)
                return False
                
        except requests.exceptions.RequestException as e:
            self.print_status(f"Erro de conex√£o: {str(e)}", False)
            return False
    
    def test_user_info(self):
        """Testa endpoint de informa√ß√µes do usu√°rio"""
        print("\n" + "="*50)
        print("üë§ TESTANDO INFORMA√á√ïES DO USU√ÅRIO")
        print("="*50)
        
        if not self.access_token:
            self.print_status("Nenhum token dispon√≠vel", False)
            return False
        
        try:
            response = requests.get(
                f"{self.base_url}/extract/auth/user-info/",
                headers={
                    "Authorization": f"Bearer {self.access_token}"
                },
                timeout=10
            )
            
            if response.status_code == 200:
                data = response.json()
                user = data['user']
                self.print_status("Informa√ß√µes do usu√°rio obtidas com sucesso!")
                self.print_status(f"ID: {user['id']}")
                self.print_status(f"Username: {user['username']}")
                self.print_status(f"Email: {user['email']}")
                self.print_status(f"Nome: {user['first_name']} {user['last_name']}")
                self.print_status(f"Staff: {user['is_staff']}")
                self.print_status(f"Superuser: {user['is_superuser']}")
                return True
            else:
                error_data = response.json()
                self.print_status(f"Erro ao obter informa√ß√µes: {error_data.get('error', 'Erro desconhecido')}", False)
                return False
                
        except requests.exceptions.RequestException as e:
            self.print_status(f"Erro de conex√£o: {str(e)}", False)
            return False
    
    def test_refresh_token(self):
        """Testa renova√ß√£o de token"""
        print("\n" + "="*50)
        print("üîÑ TESTANDO RENOVA√á√ÉO DE TOKEN")
        print("="*50)
        
        if not self.refresh_token:
            self.print_status("Nenhum refresh token dispon√≠vel", False)
            return False
        
        old_access_token = self.access_token
        
        try:
            response = requests.post(
                f"{self.base_url}/extract/auth/refresh/",
                json={
                    "refresh_token": self.refresh_token
                },
                timeout=10
            )
            
            if response.status_code == 200:
                data = response.json()
                self.access_token = data['tokens']['access_token']
                
                self.print_status("Token renovado com sucesso!")
                self.print_status(f"Novo Access Token: {self.access_token[:50]}...")
                self.print_status(f"Token mudou: {old_access_token != self.access_token}")
                return True
            else:
                error_data = response.json()
                self.print_status(f"Erro na renova√ß√£o: {error_data.get('error', 'Erro desconhecido')}", False)
                return False
                
        except requests.exceptions.RequestException as e:
            self.print_status(f"Erro de conex√£o: {str(e)}", False)
            return False
    
    def test_protected_endpoint(self):
        """Testa um endpoint protegido"""
        print("\n" + "="*50)
        print("üîí TESTANDO ENDPOINT PROTEGIDO")
        print("="*50)
        
        if not self.access_token:
            self.print_status("Nenhum token dispon√≠vel", False)
            return False
        
        try:
            # Testa endpoint de upload (sem arquivos, s√≥ para testar autentica√ß√£o)
            response = requests.post(
                f"{self.base_url}/extract/upload-e-processar-pdf/",
                headers={
                    "Authorization": f"Bearer {self.access_token}"
                },
                timeout=10
            )
            
            # Esperamos erro 400 (sem arquivos), mas n√£o 401 (n√£o autorizado)
            if response.status_code != 401:
                self.print_status("Endpoint protegido acess√≠vel com token v√°lido!")
                if response.status_code == 400:
                    self.print_status("Erro 400 esperado (sem arquivos enviados)")
                return True
            else:
                self.print_status("Endpoint protegido negou acesso - token inv√°lido", False)
                return False
                
        except requests.exceptions.RequestException as e:
            self.print_status(f"Erro de conex√£o: {str(e)}", False)
            return False
    
    def test_logout(self):
        """Testa logout"""
        print("\n" + "="*50)
        print("üö™ TESTANDO LOGOUT")
        print("="*50)
        
        if not self.access_token:
            self.print_status("Nenhum token dispon√≠vel para logout", False)
            return False
        
        try:
            response = requests.post(
                f"{self.base_url}/extract/auth/logout/",
                headers={
                    "Authorization": f"Bearer {self.access_token}"
                },
                timeout=10
            )
            
            if response.status_code == 200:
                self.print_status("Logout realizado com sucesso!")
                return True
            else:
                error_data = response.json()
                self.print_status(f"Erro no logout: {error_data.get('error', 'Erro desconhecido')}", False)
                return False
                
        except requests.exceptions.RequestException as e:
            self.print_status(f"Erro de conex√£o: {str(e)}", False)
            return False
    
    def test_invalid_token(self):
        """Testa comportamento com token inv√°lido"""
        print("\n" + "="*50)
        print("üö´ TESTANDO TOKEN INV√ÅLIDO")
        print("="*50)
        
        fake_token = "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.invalid_token"
        
        try:
            response = requests.post(
                f"{self.base_url}/extract/auth/verify/",
                headers={
                    "Authorization": f"Bearer {fake_token}"
                },
                timeout=10
            )
            
            if response.status_code == 401:
                self.print_status("Token inv√°lido rejeitado corretamente!")
                return True
            else:
                self.print_status("Sistema aceitou token inv√°lido - PROBLEMA DE SEGURAN√áA!", False)
                return False
                
        except requests.exceptions.RequestException as e:
            self.print_status(f"Erro de conex√£o: {str(e)}", False)
            return False
    
    def run_all_tests(self):
        """Executa todos os testes"""
        print("üß™ INICIANDO TESTES DO SISTEMA DE AUTENTICA√á√ÉO JWT")
        print("="*60)
        print(f"üéØ Testando servidor: {self.base_url}")
        print(f"üë§ Usu√°rio de teste: {TEST_USERNAME}")
        
        results = []
        
        # 1. Teste de login
        results.append(("Login", self.test_login()))
        
        # 2. Teste de verifica√ß√£o de token
        results.append(("Verifica√ß√£o de Token", self.test_verify_token()))
        
        # 3. Teste de informa√ß√µes do usu√°rio
        results.append(("Informa√ß√µes do Usu√°rio", self.test_user_info()))
        
        # 4. Teste de renova√ß√£o de token
        results.append(("Renova√ß√£o de Token", self.test_refresh_token()))
        
        # 5. Teste de endpoint protegido
        results.append(("Endpoint Protegido", self.test_protected_endpoint()))
        
        # 6. Teste de token inv√°lido
        results.append(("Token Inv√°lido", self.test_invalid_token()))
        
        # 7. Teste de logout
        results.append(("Logout", self.test_logout()))
        
        # Resumo dos resultados
        print("\n" + "="*60)
        print("üìä RESUMO DOS TESTES")
        print("="*60)
        
        passed = 0
        failed = 0
        
        for test_name, result in results:
            if result:
                self.print_status(f"{test_name}: PASSOU")
                passed += 1
            else:
                self.print_status(f"{test_name}: FALHOU", False)
                failed += 1
        
        print("\n" + "="*60)
        print(f"‚úÖ Testes Passaram: {passed}")
        print(f"‚ùå Testes Falharam: {failed}")
        print(f"üìà Taxa de Sucesso: {(passed/(passed+failed)*100):.1f}%")
        
        if failed == 0:
            print("\nüéâ TODOS OS TESTES PASSARAM! Sistema de autentica√ß√£o funcionando corretamente.")
        else:
            print(f"\n‚ö†Ô∏è  {failed} teste(s) falharam. Verifique os logs acima para detalhes.")
        
        return failed == 0


def check_server_running():
    """Verifica se o servidor Django est√° rodando"""
    try:
        response = requests.get(f"{DJANGO_URL}/extract/", timeout=5)
        return True
    except requests.exceptions.RequestException:
        return False


if __name__ == "__main__":
    print("üöÄ TESTE DO SISTEMA DE AUTENTICA√á√ÉO JWT - NFS-e Control")
    print("="*60)
    
    # Verifica se o servidor est√° rodando
    if not check_server_running():
        print(f"‚ùå Servidor Django n√£o est√° acess√≠vel em {DJANGO_URL}")
        print("üìù Para iniciar o servidor, execute:")
        print(f"   cd /home/marcosmadeira/nfse-abrasf-project")
        print(f"   python manage.py runserver 8001")
        sys.exit(1)
    
    print(f"‚úÖ Servidor Django est√° rodando em {DJANGO_URL}")
    
    # Executa os testes
    tester = AuthTester()
    success = tester.run_all_tests()
    
    if success:
        print("\nüéØ PR√ìXIMOS PASSOS:")
        print("1. Inicie o Streamlit: streamlit run extract/dashboard.py")
        print("2. Acesse: http://localhost:8501")
        print("3. Fa√ßa login com suas credenciais Django")
        print("4. Use a aplica√ß√£o normalmente!")
    
    sys.exit(0 if success else 1)
